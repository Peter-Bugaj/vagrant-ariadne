{"google":"","body":"# Ariadne [![Pronunciation](http://cdn4.iconfinder.com/data/icons/cc_mono_icon_set/blacks/16x16/sound_high.png)](http://static.sfdict.com/dictstatic/dictionary/audio/luna/A06/A0674700.mp3)\r\n\r\n[![Build Status][travisci-badge]][travisci]\r\n[![Dependency Status][gemnasium-badge]][gemnasium]\r\n[![Code Climate][codeclimate-badge]][codeclimate]\r\n\r\n**Ariadne is in active development at Myplanet Digital, and should be\r\nconsidered beta code. Although we dogfood the project, stability and\r\nfull documentation not yet guaranteed.**\r\n\r\n> Remember, Ariadne, you are the dreamer, you build this world. I am the\r\n> subject, my mind populates it.\r\n>\r\n> *-- Cobb, Inception*\r\n\r\n  - Source: https://github.com/myplanetdigital/ariadne\r\n\r\nAriadne is a standardized virtual machine (VM) development environment\r\nfor easily developing Drupal sites in a local sandbox that is\r\nessentially identical to a fully-configured hosted solution. It attempts\r\nto emulate a dedicated Acquia/Pantheon server as closely as possible,\r\nwith added development tools. Once several simple system requirements\r\nhave been met, it can be set up using only a few commands from your\r\ncomputer's terminal.\r\n\r\nThe current iteration aims to create a local Vagrant environment that mimics Acquia's\r\ninfrastructure as closely as possible, using cookbooks and roles that can easily be\r\nused to deploy an actual cluster.\r\n\r\nTested on Mac OSX Snow Leopard & Lion and Ubuntu 12.04 (should work on\r\nother flavours of Linux).\r\n\r\nHow It Works\r\n------------\r\n\r\nVagrant uses Virtualbox to boot a stripped-down VM image, and then uses\r\nthe Chef configuration management tool (one of the few components\r\ninstalled on the VM initially) to bring that blank slate into a fully\r\nconfigured state.\r\n\r\nThe VM will be configured identically whether installed on Mac or Linux.\r\n(Theoretically, Vagrant supports Windows as well, although Ariadne\r\nis untested in this respect.)\r\n\r\nRequirements\r\n------------\r\n\r\n*Tested versions in parentheses.*\r\n\r\n  - [Virtualbox and Extension Pack][vbox-downloads] [[Note]](#note-vbox) (v4.1.22)\r\n  - [OSX GCC Installer][about-osx-gcc-installer] [[Note]](#note-gcc-installer)\r\n  - [RVM][about-rvm] (v1.15.8) - Dealt with in \"Quick Start\" below\r\n\r\nFor Ubuntu, you'll need to install the following packages:\r\n\r\n    apt-get install build-essential libssl-dev libreadline5 libreadline-gplv2-dev zlib1g zlib1g-dev nfs-common nfs-kernel-server\r\n\r\nFor Ubuntu, you'll need to install the following packages:\r\n\r\n  - build-essential (11.5ubuntu2)\r\n  - libssl-dev (1.0.1-4ubuntu5.2)\r\n  - libreadline5 (5.2-11)\r\n  - libreadline-gplv2-dev (5.2-11)\r\n  - zlib1g (1:1.2.3.4.dfsg-3ubuntu4)\r\n  - zlib1g-dev (1:1.2.3.4.dfsg-3ubuntu4)\r\n  - nfs-common (1:1.2.5-3ubuntu3)\r\n  - nfs-kernel-server (1:1.2.5-3ubuntu3)\r\n\r\nQuick Start\r\n-----------\r\n\r\n### Setup\r\n\r\n    $ curl -L get.rvm.io | bash -s 1.15.8    # Install/Update RVM\r\n    $ rvm reload                             # Reloads RVM\r\n    $ git clone https://github.com/myplanetdigital/ariadne.git\r\n    $ cd ariadne                             # rvmrc script will run\r\n    $ rake setup                             # Runs first-time setup commands\r\n\r\nYou're now set up and ready to boot a machine. This can be either a demo\r\nsite, or a specific project.\r\n\r\n### Booting\r\n\r\nAriadne can be used to boot a simple **demo** or an **Ariadne project**.\r\nInstructions for each are given in the following sections, but first\r\nwe'll note a few general items that apply to any approach:\r\n\r\n  - After the demo or project-specific VM has spun up, here are several\r\n    commands that might be useful:\r\n\r\n        $ rake send_gitconfig                    # Send your personal gitconfig to VM\r\n        $ vagrant ssh-config >> ~/.ssh/config    # OPTIONAL: Adds entry to ssh config\r\n\r\n  - The `vagrant up` command will take quite some time regardless, but\r\n    it will take longer on the first run, as it must download a basebox\r\n    VM image, which can be several hundred MB.\r\n\r\n#### Demo\r\n\r\nIf you'd like to spin up the demo site (currently a simple Drupal\r\ninstall), just run this command:\r\n\r\n    $ vagrant up\r\n\r\nCongratulations! You now have a configured server image on your local\r\nmachine, available at http://example.dev!\r\n\r\n#### Ariadne Project\r\n\r\nSince Ariadne can also be used to spin up specific Ariadne projects, you\r\ncan also run this with a [Git URL][git-url-docs] pointing to an Ariadne\r\nproject repo.\r\n\r\n    $ rake \"init_project[GITURL]\"\r\n    $ project=PROJECTNAME vagrant up\r\n\r\nAn Ariadne project is basically a Chef cookbook to take the VM through\r\nthe last mile of project-specific configuration. An example of an\r\nAriadne project cookbook is available in the\r\n`cookbooks-projects/example` folder of this project, which is run when\r\nsetting up the demo site above.\r\n\r\nThe Rake command in the code above clones the specified repository into the\r\n`cookbooks-projects` folder (removing the `ariadne-` from the new directory\r\nname if it exists). This folder is shared with the guest machine. The\r\n`project=PROJECTNAME` tells Chef which folder in `cookbooks-projects` to use\r\nfor the final provisioning step.\r\n\r\nFor simple Drupal projects, you could copy the `cookbooks-override/ariadne`\r\nfolder and use it as a basis for your own Ariadne project.\r\n\r\nGoals\r\n-----\r\n\r\n  - Use your preferred tools from the local host machine\r\n    (Drush, IDE, etc.)\r\n  - Changes should be immediately observable in browser\r\n  - Implement as little server configuration as possible that is specific\r\n    to the Vagrant environment. It will strive to be as \"production-like\"\r\n    as possible.\r\n  - Configured with advanced performance tools (Varnish,\r\n    Memcache, APC, etc.)\r\n  - Configured with Percona, the drop-in MySQL replacement used by\r\n    enterprise Drupal hosting providers.\r\n  - Configured with debugging tools (xhprof, xdebug, webgrind)\r\n  - Provision VM as quickly as possible (persistent shared folders for\r\n    caches)\r\n\r\nFeatures\r\n--------\r\n\r\n### Incredibly standardized environment\r\n\r\nWe've tried to lock everything down as much as possible, to ensure that\r\nwhen one user encounters an issue, we all encounter it together. Here\r\nare the tools we've used:\r\n\r\n  - **Recommended version of Virtualbox** to boot the virtual machines.\r\n  - **Standard baseboxes** reliably built with [Veewee][veewee], an\r\n    automated basebox-building tool.\r\n  - **Ruby Version Manager (RVM)** to ensure a specific ruby version.\r\n  - **Bundler** to ensure specific versions of critical gem packages and\r\n    their dependencies.\r\n  - **Librarian** to ensure specific versions of Chef cookbooks are\r\n    used, which in turn ensures identical VM configuration.\r\n\r\n### SSH agent forwarding\r\n\r\nYour host machine's SSH session is forwarded into the VM, so when you\r\nSSH in or run Chef, the system will have all the same access that you\r\nhave on your host machine. In other words, if you can clone a git repo\r\nor SSH into a remote machine from your host machine, you'll be able to\r\ndo it on the VM as well. Wahoo!\r\n\r\n### Persistent apt cache\r\n\r\nEvery time Vagrant provisions a machine, the VM must redownload all the\r\nsoftware packages using the apt package manager. Normally the VM caches\r\nall the downloaded files in a special directory, but this directory is lost\r\nwhenever a VM is destroyed and rebuilt. For this reason, we share the\r\ndirectory in `tmp/apt/cache`, so it will persist between VM builds.\r\n\r\n### [vagrant-dns server][vagrant-dns]\r\n\r\n**OSX only!**\r\n\r\nBuilt-in DNS server for resolving vagrant domains. Server stops\r\nand starts with VM itself, and it can be easily uninstalled (see\r\nvagrant-dns README).\r\n\r\nIf you find yourself in a broken system state related to URL's that\r\naren't resolving, there's a rake task to restart vagrant-dns. (You can\r\nlist all rake tasks using `rake -T` or `rake -D`.)\r\n\r\nUpgrading\r\n---------\r\n\r\nShould you pull changes or switch branches, you'll very likely need to\r\nrerun the setup. At the very least, you should exit and re-enter the\r\nariadne directory so that RVM will rerun the `.rvmrc` script, where some\r\nsetup happens. You should then run `rake setup` again.\r\n\r\nIf you want to be extra sure that you're running in the same environment\r\nthat your version of Ariadne was tested on, rerun the RVM setup script,\r\nthen open a new shell. (The version of RVM that Ariadne was tested on\r\nmight vary, and this ensure you're using the exact same one.) You can\r\nalso ensure that you're using the recommended version of Virtualbox,\r\nverifiable in this README.\r\n\r\nNotes\r\n-----\r\n\r\n<a name=\"note-vbox\" />\r\n  - Be sure to install your version's matching \"Extension Pack\" from the\r\n    download page, as it contains the correct version of the [Virtualbox\r\n    Guest Additions][vbox-guest] package. This provides utlities intended to\r\n    be installed on any VM running on VBox. Thankfully, we'll be using a\r\n    [Vagrant plugin called vbguest][vagrant-vbguest], which will handle\r\n    copying this package into any VM that is out of date.\r\n<a name=\"note-gcc-installer\" />\r\n  - Xcode should also work (as opposed to just the OXS GCC installer),\r\n    although it will not always be fully tested.\r\n  - For the demo, the default password is set to \"admin\" during\r\n    site-install. Also, while the local site can send mail to actual\r\n    email addresses, the default email for admin is set to\r\n    `vagrant@localhost`, so that any sent mail will be readable at\r\n    `/var/mail/vagrant` in the VM. This default is mainly to prevent\r\n    site-install errors, and can be edited via the admin user's account\r\n    page.\r\n  - Several configuration settings can be tweaked in the\r\n    `config/config.yml`: `project`, `basebox`, `memory`, `cpu_count`.\r\n    Alternatively, any one of these can also be set on the command line\r\n    while running vagrant commands, and the values will be written into\r\n    `config.yml`. For example: `memory=2000 cpu_count=4 vagrant reload` will\r\n    reload the VM using 4 cores and with 2GB of RAM.\r\n  - These is a special environment variable that can be set for use\r\n    during any vagrant command that results in a chef run: `clean=true\r\n    vagrant provision`. It is up the each external ariadne project cookbook\r\n    to implement this feature, but the intention is that it makes it simpler\r\n    to wipe out any data directories needed to rebuild the site.  For\r\n    example, `vagrant provision` will not run `drush make` and `drush\r\n    site-install` when it detects that the docroot is already present, but\r\n    setting the `clean=true` variable can tell chef to delete the docroot,\r\n    and so the site will be rebuilt as it was during the first chef run.\r\n  - If your project's individual ariadne cookbook (for last-mile\r\n    configuration) has implemented it, you can specify the branch of\r\n    your project to build:\r\n\r\n        branch=123-story-description clean=true vagrant provision\r\n\r\n    Keep in mind that the `branch` flag might not have any effect in\r\n    some case, such as the default `example` project.\r\n  - Several baseboxes that are presumed to work for Ariadne are\r\n    available for use: `lucid32` & `lucid64`. (More may be added to\r\n    `config/baseboxes.yml` in the future.)\r\n  - Ariadne's DNS resolver is set up to send all `*.dev` domains to the\r\n    localhost, ie. Vagrant.\r\n  - Ariadne uses agent forwarding to forward the host machine's ssh\r\n    session into the VM, including keys and passphrases stored by\r\n    ssh-agent. What this means is that your VM will have the same Git/SSH\r\n    access that you enjoy on your local machine.\r\n  - The standard MySQL port `3306` inside the VM has been forwarded to\r\n    port `9306` on the local machine. This was done to avoid conflicts\r\n    on systems with `3306` is already in use by MySQL on the local machine.\r\n    When the VM is booted, you may connect your MySQL GUI to port `9306` to\r\n    access the VM's MySQL directly.\r\n  - If your `config/config.yml` file is showing up as altered when\r\n    running `git status`, and you'd like git to [un]ignore it locally:\r\n\r\n        git update-index --[no-]assume-unchanged config/config.yml\r\n\r\nKnown Issues\r\n------------\r\n\r\n  - Having dnsmasq installed on the host computer can lead to unexpected\r\n    behavior related to `resolv.conf` in the VM. This will manifest as a\r\n    failure to upgrade chef (via rubygems) during boot, right off the bat.\r\n  - Various issues like DNS, network connectivity, easy gitconfig setup,\r\n    etc.  can be dealt with using the various rake tasks. To see all the\r\n    available tasks and their descriptions, run `rake -T` (for short\r\n    descriptions) or `rake -D` (for full descriptions).\r\n  - When `cd`ing into non-root of project directory, for example\r\n    `ariadne/data`, `.rvmrc` will create new directories relative to\r\n    that dir. See notes in the `.rvmrc` for info on why normal bash script\r\n    approach is avoided.\r\n  - It seems that some network connections (seems to be Rogers-related),\r\n    will result in misconfigurations of `/etc/resolv.conf` in the VM. If\r\n    your VM is unable to download packages or run `apt-get update`, please\r\n    compare the `/etc/resolv.conf` of the VM with that on your host computer\r\n    (which presumeably works fine). Copy the relevant bits from your host\r\n    machine. Working on sorting out the origins of this.\r\n  - Oh god. The lucid64 basebox is 64 bit, so you must have a system\r\n    running in 64-bit mode in order to boot it. Some models of 64-bit\r\n    Macbooks will boot to 32-bit mode by default. Please run `uname -m` and\r\n    ensure the system architecture is `x86_64`. (Alternatively, `i386`\r\n    indicates 32-bit mode.) [This Apple knowledgebase\r\n    article][apple-sys-arch] should help you configure your machine\r\n    correctly if it's not already.\r\n  - Ariadne has been tested with a lucid64 basebox that was built on\r\n    **2012-05-07T21:00:04Z**. Please consider downloading a newer build\r\n    if yours is out of date. To see when your basebox was built, run this\r\n    command:\r\n\r\n        $ sed -n 's/.*lastStateChange=\"\\(.*\\)\".*/\\1/p' ~/.vagrant.d/boxes/lucid64/box.ovf\r\n\r\n  - LogMeIn Hamachi is known to cause issues with making `pear.php.net`\r\n    unreachable, and so the environment won't build.\r\n  - Sometimes you might get an error like this while running `vagrant up`:\r\n\r\n        The VM failed to remain in the \"running\" state while attempting to boot.\r\n        This is normally caused by a misconfiguration or host system incompatibilities.\r\n        Please open the VirtualBox GUI and attempt to boot the virtual machine\r\n        manually to get a more informative error message.\r\n\r\n    Should this occur, running `vagrant reload` seems to skirt the issue.\r\n\r\n\r\nTo Do\r\n-----\r\n\r\nhttps://github.com/myplanetdigital/ariadne/issues\r\n\r\n* Doc the need to refresh browser for DNS **or** run dns rake task\r\n  first.\r\n* Create sister project to provide a base install profile that is\r\n  pre-configured to use the advanced components (Memcache, Varnish,\r\n  etc.) In progress: [2ndleveldeep][2ndleveldeep-profile]\r\n* Either avoid using the confusing word \"host\" (vs \"guest\" VM) to\r\n  describe local machine, or define terminology somewhere.\r\n* Add proper string support using `i18n` gem.\r\n* Convert to rubygem?\r\n* Convert example project to use `drush qd --no-server`.\r\n\r\nContributing\r\n------------\r\n\r\nAriadne is being developed using the [git-flow tool][gitflow] and\r\nmethodology. The take-home message is that pull requests should be\r\nsubmitted to the `develop` branch.\r\n\r\nHere's the gist of how we're applying it:\r\n\r\n  - New features happen on `develop` branch, not `master`.\r\n  - Release branches are created in preparation for a tagged release,\r\n    and only bugfixes happen on release branches.\r\n  - When it seems all bugs are fixed on release branch, it's merged into\r\n    `master`, tagged, and the release branch is removed.\r\n  - When developing new features on `develop`, feature branches are\r\n    recommended.\r\n\r\nLicense and Author\r\n------------------\r\n\r\nAuthor:: [Patrick Connolly][patcon] (<patrick@myplanetdigital.com>)\r\n[![endorse][coderwall-badge]][coderwall]\r\n\r\nContributors:: https://github.com/myplanetdigital/ariadne/contributors\r\n\r\nCopyright:: 2012, Myplanet Digital, Inc.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n<!-- Links -->\r\n   [patcon]:                  http://about.me/patcon\r\n   [coderwall]:               http://coderwall.com/patcon\r\n   [coderwall-badge]:         http://api.coderwall.com/patcon/endorsecount.png\r\n   [codeclimate]:             https://codeclimate.com/github/myplanetdigital/ariadne\r\n   [codeclimate-badge]:       https://codeclimate.com/badge.png\r\n   [gemnasium]:               https://gemnasium.com/myplanetdigital/ariadne\r\n   [gemnasium-badge]:         https://gemnasium.com/myplanetdigital/ariadne.png \r\n   [travisci]:                http://travis-ci.org/myplanetdigital/ariadne\r\n   [travisci-badge]:          https://secure.travis-ci.org/myplanetdigital/ariadne.png?branch=develop\r\n   [condel]:                  https://github.com/myplanetdigital/condel\r\n   [CD-summary]:              http://continuousdelivery.com/2010/02/continuous-delivery/\r\n   [about-rvm]:               https://rvm.io/\r\n   [about-vagrant]:           http://vagrantup.com/\r\n   [about-cap]:               https://github.com/capistrano/capistrano/wiki\r\n   [about-vagrant-kick]:      https://github.com/arioch/vagrant-kick#readme\r\n   [install-rvm]:             http://beginrescueend.com/rvm/install/\r\n   [about-osx-gcc-installer]: https://github.com/kennethreitz/osx-gcc-installer#readme\r\n   [about-xdebug]:            http://xdebug.org/\r\n   [install-xdebug-emacs1]:   http://code.google.com/p/geben-on-emacs/source/browse/trunk/README\r\n   [install-xdebug-emacs2]:   http://puregin.org/debugging-php-with-xdebug-and-emacs-on-mac-os-x\r\n   [vbox-downloads]:          http://www.virtualbox.org/wiki/Downloads\r\n   [vbox-guest]:              http://www.virtualbox.org/manual/ch04.html#idp5980192\r\n   [vagrant-vbguest]:         https://github.com/dotless-de/vagrant-vbguest#readme\r\n   [vagrant-dns]:             https://github.com/BerlinVagrant/vagrant-dns#readme\r\n   [network-fix-ref]:         http://stackoverflow.com/questions/10378185/vagrant-a-better-to-way-to-reset-my-guest-vagrant-vms-network\r\n   [install-zsh]:             http://jesperrasmussen.com/switching-bash-with-zsh\r\n   [install-oh-my-zsh]:       https://github.com/robbyrussell/oh-my-zsh#setup\r\n   [apple-sys-arch]:          http://support.apple.com/kb/ht3773\r\n   [2ndleveldeep-profile]:    https://github.com/myplanetdigital/2ndleveldeep#readme\r\n   [git-url-docs]:            http://git-scm.com/docs/git-clone#_git_urls\r\n   [gitflow]:                 https://github.com/nvie/gitflow#readme\r\n   [veewee]:                  https://github.com/jedi4ever/veewee#readme\r\n","name":"Ariadne","tagline":"A standardized virtual machine (VM) development environment for easily developing Drupal sites in a local sandbox that is essentially identical to a fully-configured hosted solution.","note":"Don't delete this file! It's used internally to help with page regeneration."}